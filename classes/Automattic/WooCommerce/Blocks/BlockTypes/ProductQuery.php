<?php

namespace Automattic\WooCommerce\Blocks\BlockTypes;

// phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_tax_query
// phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_meta_query
/**
 * ProductQuery class.
 */
class ProductQuery extends \Automattic\WooCommerce\Blocks\BlockTypes\AbstractBlock
{
    /**
     * Block name.
     *
     * @var string
     */
    protected $block_name = 'product-query';
    /**
     * The Block with its attributes before it gets rendered
     *
     * @var array
     */
    protected $parsed_block;
    /**
     * All the query args related to the filter by attributes block.
     *
     * @var array
     */
    protected $attributes_filter_query_args = array();
    /**
     * Initialize this block type.
     *
     * - Hook into WP lifecycle.
     * - Register the block with WordPress.
     * - Hook into pre_render_block to update the query.
     */
    protected function initialize()
    {
    }
    /**
     * Check if a given block
     *
     * @param array $parsed_block The block being rendered.
     * @return boolean
     */
    private function is_woocommerce_variation($parsed_block)
    {
    }
    /**
     * Update the query for the product query block.
     *
     * @param string|null $pre_render   The pre-rendered content. Default null.
     * @param array       $parsed_block The block being rendered.
     */
    public function update_query($pre_render, $parsed_block)
    {
    }
    /**
     * Update the query for the product query block in Editor.
     *
     * @param array           $args    Query args.
     * @param WP_REST_Request $request Request.
     */
    public function update_rest_query($args, $request)
    {
    }
    /**
     * Return a custom query based on attributes, filters and global WP_Query.
     *
     * @param WP_Query $query The WordPress Query.
     * @return array
     */
    public function build_query($query)
    {
    }
    /**
     * Return the product ids based on the attributes.
     *
     * @param array $parsed_block The block being rendered.
     * @return array
     */
    private function get_products_ids_by_attributes($parsed_block)
    {
    }
    /**
     * Merge in the first parameter the keys "post_in", "meta_query" and "tax_query" of the second parameter.
     *
     * @param array $a The first query.
     * @param array $b The second query.
     * @return array
     */
    private function merge_queries($a, $b)
    {
    }
    /**
     * Return a query for on sale products.
     *
     * @return array
     */
    private function get_on_sale_products_query()
    {
    }
    /**
     * Return a query for products depending on their stock status.
     *
     * @param array $stock_statii An array of acceptable stock statii.
     * @return array
     */
    private function get_stock_status_query($stock_statii)
    {
    }
    /**
     * Set the query vars that are used by filter blocks.
     *
     * @return array
     */
    private function get_query_vars_from_filter_blocks()
    {
    }
    /**
     * Set the query vars that are used by filter blocks.
     *
     * @param array $public_query_vars Public query vars.
     * @return array
     */
    public function set_query_vars($public_query_vars)
    {
    }
    /**
     * Get all the query args related to the filter by attributes block.
     *
     * @return array
     * [color] => Array
     *   (
     *        [filter] => filter_color
     *        [query_type] => query_type_color
     *    )
     *
     * [size] => Array
     *    (
     *        [filter] => filter_size
     *        [query_type] => query_type_size
     *    )
     * )
     */
    private function get_filter_by_attributes_query_vars()
    {
    }
    /**
     * Return queries that are generated by query args.
     *
     * @return array
     */
    private function get_queries_by_applied_filters()
    {
    }
    /**
     * Return queries that are generated by attributes
     *
     * @param array $parsed_block The Product Query that being rendered.
     * @return array
     */
    private function get_queries_by_attributes($parsed_block)
    {
    }
    /**
     * Return a query that filters products by price.
     *
     * @return array
     */
    private function get_filter_by_price_query()
    {
    }
    /**
     * Return a query that filters products by attributes.
     *
     * @return array
     */
    private function get_filter_by_attributes_query()
    {
    }
    /**
     * Return a query that filters products by stock status.
     *
     * @return array
     */
    private function get_filter_by_stock_status_query()
    {
    }
    /**
     * Intersect arrays neither of them are empty, otherwise merge them.
     *
     * @param array ...$arrays Arrays.
     * @return array
     */
    private function intersect_arrays_when_not_empty(...$arrays)
    {
    }
}